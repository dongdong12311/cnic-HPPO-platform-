.. _intro-tutorial:

====================
教程：均值方差模型
====================

------------------------------------------------------

CNICPortfolio 抽离了策略框架的所有技术细节，以API的方式提供给策略研发者用于编写策略，从而避免陷入过多的技术细节，而非金融程序建模本身。

------------------------------------------------------
------------------------------------------------------
本教程以均值方差模型为例，介绍如何在我们的平台上运行一个投资组合策略

在进行回测的过程中需要明确以下几个回测要素，下面的参数是必须的：

*   策略文件
*   配置文件
*   回测起始时间
*   回测结束时间
*   起始资金
*   Benchmark

    
策略编写流程

.. code-block:: python3
        
    def handle_data(context, data):
        date = data.today()
        if date in context.balance_dates:
            temp = {}
            for code in context.stocks:
                history_price = data.history_bars(code,
                                                  context.expected_return_days,
                                                  '1d','close')
                if history_price is not None:     
                    temp.update({code:history_price})
            history_prices = pd.DataFrame(temp)
            mu = expected_returns.mean_historical_return(history_prices)
            if context.cov_method == 'sample':
                S = risk_models.sample_cov(history_prices)
            elif context.cov_method == 'semi':
                S = risk_models.semicovariance(history_prices)
            elif context.cov_method == 'exp_cov':
                S = risk_models.exp_cov(history_prices)
                
            ef = EfficientFrontier(mu, S)
            
            if context.opt_criterion == 'max_sharpe':
                weights = ef.max_sharpe()
            elif context.opt_criterion == 'efficient_return':
                weights = ef.efficient_return(context.target_return)
            elif context.opt_criterion == 'efficient_risk':
                weights = ef.efficient_risk(context.targe_risk, context.risk_free_rate)
            elif context.opt_criterion == 'min_volatility':
                weights = ef.min_volatility()
            
            if context.cleaned_weights is True:
                weights = ef.clean_weights()
            
            weight = []
            prices = []
            for code in context.stocks:
                weight.append(weights[code])
                prices.append(data.latest_price(code,"1d"))
            
            data.order_target_percent(context.stocks, weight,prices)   


然后编写我们的配置文件

.. code-block:: python3

    "stragety":"sample_markowitz",
    "start":20180101,
    "end":20181230,
    "initial_capital":1000000,
    "benchmark":"000001.SH",
    "balanced_dates":{"method":"equal_difference","param":20},
     "stocks" : ["000001.SZ","000002.SZ","000004.SZ","000005.SZ","000006.SZ","000007.SZ",
      "000008.SZ","000009.SZ","000010.SZ"],
     "expected_return_days" : 30,
     "cov_method" : "sample",
     "opt_criterion" : "max_sharpe",
     "cleaned_weights" : True,
     "target_return" : None,
     "target_risk"   : 0.1,
     "risk_free_rate" : 0.02,
     "opt_param":{"target_return":{"start":0.1,"step":0.01,"dt":3,"data_type":'float'},
                  "expected_return_days":{"start":10,"step":10,"dt":3,"data_type":'int'}}
             
这样就写好了一个均值方差模型








