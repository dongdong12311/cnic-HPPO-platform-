.. _intro-examples:

==========================================
策略示例
==========================================



在下面我们列举一些常用的投资组合策略，您可以通过我们的平台运行

.. _intro-examples-buy-and-hold:

第一个策略-买入&持有
------------------------------------------------------

在某一段时间每次增加一定比例的仓位一直到期末

输入参数：

1.调仓日期，可选的有：每日调仓、每周调仓、每月调仓、季度调仓、定时调仓。如果选择“定时调仓”需要选择调仓周期，例如：20  

2.投资组合标的，例如：["000001.SZ", "000002.SZ"]

3.调仓权重，例如：[0.1,0.1]
          
..  code-block:: python3
    :linenos:

    # 在这个方法中编写任何的初始化逻辑。context对象将会在你的算法策略的任何方法之间做传递。
    stocks = ["000001.SZ", "000002.SZ"]
    
    # 在这个方法中编写任何的初始化逻辑。context对象将会在你的算法策略的任何方法之间做传递。
    def init(context):
        context.stocks = stocks
    
    def handle_bar(context, api):
        prices = []
        # buy 10% everyday 
        weights = [0.1,0.1]
        for stock in context.stocks:
            prices.append(api.latest_price(stock,"1d"))
        api.order_target_percent(stocks,weights,prices)   




.. _intro-examples-Markowitz均值方差模型  :

Markowitz均值方差模型
------------------------------------------------------

输入参数：

1.调仓日期，可选的有：每日调仓、每周调仓、每月调仓、季度调仓、定时调仓。如果选择“定时调仓”需要选择调仓周期，例如：20

2.投资组合标的，例如：["000001.SZ", "000002.SZ"]

3.数据周期，例如：20

4.如何估计协方差矩阵，可选：sample,semi,exp_cov

5.优化方法，可选：max_sharpe，efficient_return，efficient_risk，min_volatility

..  code-block:: python3

    from trading_system.api.api import create_balanced_dates
    
            
    STOCKS = ['000001.SZ','000002.SZ','000004.SZ','000005.SZ','000006.SZ','000007.SZ',
              '000008.SZ','000009.SZ','000010.SZ']
              
    expected_return_days = 100 #利用多久的数据估算
    cov_method = 'sample' #如何估算协方差矩阵
    optimization_criterion = 'max_sharpe' #优化方法
    cleaned_weights = True
    target_return = 0.2
    target_risk   = 0.1
    risk_free_rate = 0.02    
    
    
    
    from pypfopt.efficient_frontier import EfficientFrontier
    from pypfopt import risk_models
    from pypfopt import expected_returns
    
    def initialize(context):
        context.stocks = STOCKS
    
        context.expected_return_days = expected_return_days
        context.opt_criterion = optimization_criterion
        context.tick  = 0
        context.balance_dates = create_balanced_dates(
                context.config['start'],
                context.config['end'],
                {"dt":20},
                method ='equal_difference')
        context.cleaned_weights = cleaned_weights
        context.cov_method = cov_method
        context.target_return = target_return    
        context.targe_risk = target_risk
        context.risk_free_rate = risk_free_rate
    
        print('initialized!')    
        
    import pandas as pd
    def handle_data(context, data):
        date = data.today()
        if date in context.balance_dates:
            temp = {}
            for code in context.stocks:
                history_price = data.history_bars(code,
                                                  context.expected_return_days,
                                                  '1d','close')
                if history_price is not None:     
                    temp.update({code:history_price})
            history_prices = pd.DataFrame(temp)
            mu = expected_returns.mean_historical_return(history_prices)
            if context.cov_method == 'sample':
                S = risk_models.sample_cov(history_prices)
            elif context.cov_method == 'semi':
                S = risk_models.semicovariance(history_prices)
            elif context.cov_method == 'exp_cov':
                S = risk_models.exp_cov(history_prices)
                
            ef = EfficientFrontier(mu, S)
            
            if context.opt_criterion == 'max_sharpe':
                weights = ef.max_sharpe()
            elif context.opt_criterion == 'efficient_return':
                weights = ef.efficient_return(context.target_return)
            elif context.opt_criterion == 'efficient_risk':
                weights = ef.efficient_risk(context.targe_risk, context.risk_free_rate)
            elif context.opt_criterion == 'min_volatility':
                weights = ef.min_volatility()
            
            if context.cleaned_weights is True:
                weights = ef.clean_weights()
            
            weight = []
            prices = []
            for code in context.stocks:
                weight.append(weights[code])
                prices.append(data.latest_price(code,"1d"))
            
            data.order_target_percent(context.stocks, weight,prices)     
    

条件在险价值（CVAR）模型
------------------------------------------------------

输入参数：

1.调仓日期，可选的有：每日调仓、每周调仓、每月调仓、季度调仓、定时调仓。如果选择“定时调仓”需要选择调仓周期，例如：20  

2.投资组合标的，例如：["000001.SZ", "000002.SZ"]

3.数据周期，例如：100

4.置信度beta，例如：0.8（0到1之间的数）


..  code-block:: python3

    from pypfopt import value_at_risk
    from trading_system.api.api import create_balanced_dates
    import pandas as pd
    
    
            
    STOCKS = ['000001.SZ','000002.SZ','000004.SZ','000005.SZ','000006.SZ','000007.SZ',
              '000008.SZ','000009.SZ','000010.SZ']
    
    
    expected_return_days = 100 #利用多久的数据估算
    beta = 0.8
    balance_period = 20
    balance_method = 'equal_difference'
    
    def initialize(context):
        context.stocks = STOCKS
    
        context.expected_return_days = expected_return_days
        context.beta = beta
        context.tick  = 0
        context.balance_dates = create_balanced_dates(
                context.config['start'],
                context.config['end'],
                {"dt":balance_period},
                method =balance_method)
        context.cleaned_weights = True
    
        print('initialized!')
        
    def handle_data(context, data):
        date = data.today()
        if date in context.balance_dates:
            temp = {}
            for code in context.stocks:
                history_price = data.history_bars(code,
                                                  context.expected_return_days,
                                                  '1d','close')
                if history_price is not None:     
                    temp.update({code:history_price})
            history_prices = pd.DataFrame(temp)
            model = value_at_risk.CVAROpt(history_prices.pct_change().dropna())
            try:           
                weights = model.min_cvar(beta = context.beta)
            except:
                return 
            weight = []
            prices = []
            for code in context.stocks:
                weight.append(weights[code])
                prices.append(data.latest_price(code,"1d"))
            data.order_target_percent(context.stocks, weight,prices)      
   
      

等级风险平价（HPR）模型
------------------------------------------------------


输入参数：

1.调仓日期，可选的有：每日调仓、每周调仓、每月调仓、季度调仓、定时调仓。如果选择“定时调仓”需要选择调仓周期，例如：20  

2.投资组合标的，例如：["000001.SZ", "000002.SZ"]

3.数据周期，例如：100


..  code-block:: python3   
    
    from pypfopt import hierarchical_risk_parity
    import pandas as pd
    from trading_system.api.api import create_balanced_dates
        
    STOCKS = ['000001.SZ','000002.SZ','000004.SZ','000005.SZ','000006.SZ','000007.SZ',
              '000008.SZ','000009.SZ','000010.SZ']
    
    balance_period = 20
    
    balance_method = 'equal_difference'
     
    cleaned_weights = True
    
    expected_return_days = 100 #利用多久的数据估算
    
    def initialize(context):
        context.stocks = STOCKS
        context.expected_return_days = expected_return_days
        context.tick  = 0
        context.balance_dates = create_balanced_dates(
                context.config['start'],
                context.config['end'],
                {"dt":balance_period},
                method =balance_method)
        context.cleaned_weights = cleaned_weights
    
        print('initialized!')
    
    def handle_data(context, data):
        date = data.today()
        if date in context.balance_dates:
            temp = {}
            for code in context.stocks:
                history_price = data.history_bars(code,
                                                  context.expected_return_days,
                                                  '1d','close')
                if history_price is not None:     
                    temp.update({code:history_price})
            history_prices = pd.DataFrame(temp)
            model = hierarchical_risk_parity.HRPOpt(history_prices.pct_change().dropna())
            weights = model.hrp_portfolio()
            weight = []
            prices = []
            for code in context.stocks:
                weight.append(weights[code])
                prices.append(data.latest_price(code,"1d"))
            data.order_target_percent(context.stocks, weight,prices)    
  


Black-Litterman 模型
------------------------------------------------------


输入参数：

1.调仓日期，可选的有：每日调仓、每周调仓、每月调仓、季度调仓、定时调仓。如果选择“定时调仓”需要选择调仓周期，例如：20  

2.投资组合标的，例如：["000001.SZ", "000002.SZ"]

3.数据周期，例如：100

4.观点矩阵P Q


..  code-block:: python3 
 
    import numpy as np
    'this example is given to realize the cvar model '
    from trading_system.api.api import describe,draw_efficient_frontier,get_BL_efficient_frontier,get_BL_minimum_variance_portfolio,get_BL_maximum_utility_portfolio,get_maximum_sharpe_portfolio
    from trading_system.api.api import create_balanced_dates
    import pandas as pd
    
    balance_period = 20
    balance_method = 'equal_difference' 
    STOCKS = ['000001.SZ','000002.SZ','000004.SZ','000005.SZ','000006.SZ','000007.SZ']
    cleaned_weights = True
    expected_return_days = 100 #利用多久的数据估算
    
    
    def initialize(context):
        context.stocks = STOCKS
        context.expected_return_days = expected_return_days
        context.tick  = 0
        context.balance_dates = create_balanced_dates(
                context.config['start'],
                context.config['end'],
                {"dt":balance_period},
                method =balance_method)
        context.cleaned_weights = cleaned_weights
    
        
        
    def handle_data(context, data):
        date = data.today()
        if date in context.balance_dates:
            temp = {}
            for code in context.stocks:
                history_price = data.history_bars(code,
                                                  context.expected_return_days,
                                                  '1d','close')
                if history_price is not None:     
                    temp.update({code:history_price})
            df = pd.DataFrame(temp)
            #计算收益率数据
            for index in context.stocks:
                df[index] = df[index] / df[index].shift() - 1.
            return_table = df.dropna()
            output=describe(return_table, is_print=True) 
            covariance_matrix = output['covariance_matrix']
            tau = 0.05
            # - 生成观点矩阵P、Q、Omega，根据我们对股市资产配置的未来走势的判断，给出下面3个观点：
            # - 观点1： 000004.SZ的收益低于000005.SZ收益2%
            ## - 观点2： '000006.SZ'收益上调到10%，
            ## - 观点3：'000007.SZ'收益5% 
    
            P = np.array([[0,0,1,-1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1]])
            Q = np.array([0.02,0.1,0.05])
            
            Omega = tau*(P.dot(covariance_matrix).dot(P.transpose()))
            
            Omega = np.diag(np.diag(Omega,k=0))
            
            weights=get_BL_minimum_variance_portfolio(return_table,tau=0.05,P=P,Q=Q,Omega=Omega, allow_short=False, show_details=True)
            
            weight = []
            prices = []
            for code in context.stocks:
                weight.append(weights[code])
                prices.append(data.latest_price(code,"1d"))
            data.order_target_percent(context.stocks, weight,prices)  
 